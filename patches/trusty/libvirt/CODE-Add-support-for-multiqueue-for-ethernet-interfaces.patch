commit ac6df7e3beac101cb639afef433b7c8fbbabe12c
Author: Michal Dubiel <md@semihalf.com>
Date:   Fri Apr 22 16:14:03 2016 +0200

    Allow multiqueues with ethernet interface type
    
    The qemu does not support simultaneous ifname= and vhostfds= options.
    Therefore, for the ehternet type interfaces the ifname= along with queues= is
    used instead of fds= and vhostfds=.
    
    The passed in via ifname= option tap device has to be created in multiqueue
    mode.

diff --git a/src/qemu/qemu_command.c b/src/qemu/qemu_command.c
index 11c6823..a536578 100644
--- a/src/qemu/qemu_command.c
+++ b/src/qemu/qemu_command.c
@@ -5189,7 +5189,8 @@ qemuBuildHostNetStr(virDomainNetDefPtr net,
                     char **tapfd,
                     size_t tapfdSize,
                     char **vhostfd,
-                    size_t vhostfdSize)
+                    size_t vhostfdSize,
+                    bool use_queues)
 {
     bool is_tap = false;
     virBuffer buf = VIR_BUFFER_INITIALIZER;
@@ -5287,7 +5288,12 @@ qemuBuildHostNetStr(virDomainNetDefPtr net,
     }
 
     if (is_tap) {
-        if (vhostfdSize) {
+        if (vhostfdSize && use_queues) {
+            virBufferAddLit(&buf, ",vhost=on");
+            if (vhostfdSize > 1) {
+                virBufferAsprintf(&buf, ",queues=%u", net->driver.virtio.queues);
+            }
+        } else if (vhostfdSize) {
             virBufferAddLit(&buf, ",vhost=on,");
             if (vhostfdSize == 1) {
                 virBufferAsprintf(&buf, "vhostfd=%s", vhostfd[0]);
@@ -8176,6 +8182,7 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
     virQEMUDriverConfigPtr cfg = NULL;
     virNetDevBandwidthPtr actualBandwidth;
     size_t i;
+    unsigned int queues = 0;
 
 
     if (!bootindex)
@@ -8194,7 +8201,8 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
     /* Currently nothing besides TAP devices supports multiqueue. */
     if (net->driver.virtio.queues > 0 &&
         !(actualType == VIR_DOMAIN_NET_TYPE_NETWORK ||
-          actualType == VIR_DOMAIN_NET_TYPE_BRIDGE)) {
+          actualType == VIR_DOMAIN_NET_TYPE_BRIDGE ||
+          actualType == VIR_DOMAIN_NET_TYPE_ETHERNET)) {
         virReportError(VIR_ERR_CONFIG_UNSUPPORTED,
                        _("Multiqueue network is not supported for: %s"),
                        virDomainNetTypeToString(actualType));
@@ -8296,7 +8304,6 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
 
     if ((actualType == VIR_DOMAIN_NET_TYPE_NETWORK ||
          actualType == VIR_DOMAIN_NET_TYPE_BRIDGE ||
-         actualType == VIR_DOMAIN_NET_TYPE_ETHERNET ||
          actualType == VIR_DOMAIN_NET_TYPE_DIRECT) &&
         !standalone) {
         /* Attempt to use vhost-net mode for these types of
@@ -8315,6 +8322,23 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
             goto cleanup;
     }
 
+    if ((actualType == VIR_DOMAIN_NET_TYPE_ETHERNET) && !standalone) {
+        queues = net->driver.virtio.queues;
+        if (queues <= 1) {
+            queues = 0;
+            vhostfdSize = 1;
+
+            if (VIR_ALLOC_N(vhostfd, vhostfdSize) < 0 ||
+                VIR_ALLOC_N(vhostfdName, vhostfdSize))
+                goto cleanup;
+
+            memset(vhostfd, -1, vhostfdSize * sizeof(vhostfd[0]));
+
+            if (qemuOpenVhostNet(def, net, qemuCaps, vhostfd, &vhostfdSize) < 0)
+                goto cleanup;
+        }
+    }
+
     for (i = 0; i < tapfdSize; i++) {
         if (virSecurityManagerSetTapFDLabel(driver->securityManager,
                                             def, tapfd[i]) < 0)
@@ -8344,13 +8368,16 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
         if (!(host = qemuBuildHostNetStr(net, driver,
                                          ',', vlan,
                                          tapfdName, tapfdSize,
-                                         vhostfdName, vhostfdSize)))
+                                         vhostfdName,
+                                         queues ? queues : vhostfdSize,
+                                         queues ? true : false)))
             goto cleanup;
         virCommandAddArgList(cmd, "-netdev", host, NULL);
     }
     if (qemuDomainSupportsNicdev(def, qemuCaps, net)) {
         if (!(nic = qemuBuildNicDevStr(def, net, vlan, bootindex,
-                                       vhostfdSize, qemuCaps)))
+                                       queues ? queues : vhostfdSize,
+                                       qemuCaps)))
             goto cleanup;
         virCommandAddArgList(cmd, "-device", nic, NULL);
     } else {
@@ -8362,7 +8389,9 @@ qemuBuildInterfaceCommandLine(virCommandPtr cmd,
         if (!(host = qemuBuildHostNetStr(net, driver,
                                          ',', vlan,
                                          tapfdName, tapfdSize,
-                                         vhostfdName, vhostfdSize)))
+                                         vhostfdName,
+                                         queues ? queues : vhostfdSize,
+                                         queues ? true : false)))
             goto cleanup;
         virCommandAddArgList(cmd, "-net", host, NULL);
     }
diff --git a/src/qemu/qemu_command.h b/src/qemu/qemu_command.h
index 0fc59a8..cd3dc13 100644
--- a/src/qemu/qemu_command.h
+++ b/src/qemu/qemu_command.h
@@ -105,7 +105,8 @@ char *qemuBuildHostNetStr(virDomainNetDefPtr net,
                           char **tapfd,
                           size_t tapfdSize,
                           char **vhostfd,
-                          size_t vhostfdSize);
+                          size_t vhostfdSize,
+                          bool use_queues);
 
 /* Legacy, pre device support */
 char *qemuBuildNicStr(virDomainNetDefPtr net,
diff --git a/src/qemu/qemu_hotplug.c b/src/qemu/qemu_hotplug.c
index 170768b..9c85664 100644
--- a/src/qemu/qemu_hotplug.c
+++ b/src/qemu/qemu_hotplug.c
@@ -874,6 +874,7 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
     virNetDevBandwidthPtr actualBandwidth;
     virQEMUDriverConfigPtr cfg = virQEMUDriverGetConfig(driver);
     size_t i;
+    unsigned int queues = 0;
 
     /* preallocate new slot for device */
     if (VIR_REALLOC_N(vm->def->nets, vm->def->nnets + 1) < 0)
@@ -908,7 +909,8 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
     /* Currently nothing besides TAP devices supports multiqueue. */
     if (net->driver.virtio.queues > 0 &&
         !(actualType == VIR_DOMAIN_NET_TYPE_NETWORK ||
-          actualType == VIR_DOMAIN_NET_TYPE_BRIDGE)) {
+          actualType == VIR_DOMAIN_NET_TYPE_BRIDGE ||
+          actualType == VIR_DOMAIN_NET_TYPE_ETHERNET)) {
         virReportError(VIR_ERR_CONFIG_UNSUPPORTED,
                        _("Multiqueue network is not supported for: %s"),
                        virDomainNetTypeToString(actualType));
@@ -948,12 +950,17 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
         if (qemuOpenVhostNet(vm->def, net, priv->qemuCaps, vhostfd, &vhostfdSize) < 0)
             goto cleanup;
     } else if (actualType == VIR_DOMAIN_NET_TYPE_ETHERNET) {
-        vhostfdSize = 1;
-        if (VIR_ALLOC(vhostfd) < 0)
-            goto cleanup;
-        *vhostfd = -1;
-        if (qemuOpenVhostNet(vm->def, net, priv->qemuCaps, vhostfd, &vhostfdSize) < 0)
-            goto cleanup;
+        queues = net->driver.virtio.queues;
+        if (queues <= 1) {
+            queues = 0;
+            vhostfdSize = 1;
+
+            if (VIR_ALLOC(vhostfd) < 0)
+                goto cleanup;
+            *vhostfd = -1;
+            if (qemuOpenVhostNet(vm->def, net, priv->qemuCaps, vhostfd, &vhostfdSize) < 0)
+                goto cleanup;
+        }
     }
 
     /* Set device online immediately */
@@ -1034,13 +1041,17 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
         if (!(netstr = qemuBuildHostNetStr(net, driver,
                                            ',', -1,
                                            tapfdName, tapfdSize,
-                                           vhostfdName, vhostfdSize)))
+                                           vhostfdName,
+                                           queues ? queues : vhostfdSize,
+                                           queues ? true : false)))
             goto cleanup;
     } else {
         if (!(netstr = qemuBuildHostNetStr(net, driver,
                                            ' ', vlan,
                                            tapfdName, tapfdSize,
-                                           vhostfdName, vhostfdSize)))
+                                           vhostfdName,
+                                           queues ? queues : vhostfdSize,
+                                           queues ? true : false)))
             goto cleanup;
     }
 
@@ -1073,7 +1084,8 @@ int qemuDomainAttachNetDevice(virConnectPtr conn,
 
     if (virQEMUCapsGet(priv->qemuCaps, QEMU_CAPS_DEVICE)) {
         if (!(nicstr = qemuBuildNicDevStr(vm->def, net, vlan, 0,
-                                          vhostfdSize, priv->qemuCaps)))
+                                          queues ? queues : vhostfdSize,
+                                          priv->qemuCaps)))
             goto try_remove;
     } else {
         if (!(nicstr = qemuBuildNicStr(net, NULL, vlan)))
